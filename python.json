{
	"group_a1": {
		"prefix": "~sports",
		"body": [
		  "def removeDuplicate(d):",
		  "    lst=[]",
		  "    for i in d:",
		  "        if i not in lst:",
		  "            lst.append(i)",
		  "    return lst",
		  "",
		  "def intersection(lst1,lst2):",
		  "    lst3=[]",
		  "    for val in lst1:",
		  "        if val in lst2:",
		  "            lst3.append(val)",
		  "    return lst3",
		  "",
		  "def union(lst1,lst2):",
		  "    lst3=lst1.copy()",
		  "    for val in lst2:",
		  "        if val not in lst3:",
		  "            lst3.append(val)",
		  "    return lst3",
		  "",
		  "def diff(lst1,lst2):",
		  "    lst3=[]",
		  "    for val in lst1:",
		  "        if val not in lst2:",
		  "            lst3.append(val)",
		  "    return lst3",
		  "",
		  "def sym_diff(lst1,lst2):",
		  "    lst3=[]",
		  "    D1=diff(lst1,lst2)",
		  "    print(\"Difference between Cricket and Badminton (C-B) is : \", D1)",
		  "    D2=diff(lst2,lst1)",
		  "    print(\"Difference between Badminton and Cricket (B-C) is : \", D2)",
		  "    lst3=union(D1,D2)",
		  "    return lst3",
		  "",
		  "def CB(lst1,lst2):",
		  "    lst3=intersection(lst1,lst2)",
		  "    print(\"\\n\\nList of students who play both cricket and badminton is : \", lst3)",
		  "    return len(lst3)",
		  "",
		  "def eCeB(lst1,lst2):",
		  "    lst3=sym_diff(lst1,lst2)",
		  "    print(\"\\nList of students who play either cricket or badminton but not both is : \",lst3)",
		  "    return len(lst3)",
		  "",
		  "def nCnB(lst1,lst2,lst3):",
		  "    lst4=diff(lst1,union(lst2,lst3))",
		  "    print(\"\\n\\nList of students who play neither cricket nor badminton is : \",lst4)",
		  "    return len(lst4)",
		  "",
		  "def CBnF(lst1,lst2,lst3):",
		  "    lst4=diff(intersection(lst1,lst2),lst3)",
		  "    print(\"\\n\\nList of students who play cricket and football but not badminton is : \",lst4)",
		  "    return len(lst4)",
		  "",
		  "SEComp = []",
		  "n = int(input(\"\\nEnter number of students in SE COMP: \"))",
		  "print(\"Enter the names of\",n,\"students (Please press ENTER after entering each students name) :\")",
		  "for i in range(0, n):",
		  "    ele = input()",
		  "    SEComp.append(ele)  # adding the element",
		  "print(\"Original list of students in SEComp : \" + str(SEComp))",
		  "",
		  "Cricket = []",
		  "n = int(input(\"\\n\\nEnter number of students who play cricket : \"))",
		  "print(\"Enter the names of\",n,\"students who play cricket (Please press ENTER after entering each students name) :\")",
		  "for i in range(0, n):",
		  "    ele = input()",
		  "    Cricket.append(ele)  # adding the element",
		  "print(\"Original list of students playing cricket is :\" +str(Cricket))",
		  "Cricket=removeDuplicate(Cricket)",
		  "print(\"The list of students playing cricket after removing duplicates : \" +str(Cricket))",
		  "",
		  "Football = []",
		  "n = int(input(\"\\n\\nEnter number of students who play football : \"))",
		  "print(\"Enter the name of\",n,\"students who play football (Please press ENTER after entering each students name) :\")",
		  "for i in range(0, n):",
		  "    ele = input()",
		  "    Football.append(ele)  # adding the element",
		  "print(\"Original list of students playing football :\" +str(Football))",
		  "Football=removeDuplicate(Football)",
		  "print(\"The list of students playing football after removing duplicates : \" +str(Football))",
		  "",
		  "Badminton = []",
		  "n = int(input(\"\\n\\nEnter number of students who play badminton : \"))",
		  "print(\"Enter the name of\",n,\"students who play badminton (Please press ENTER after entering each students name) :\")",
		  "for i in range(0, n):",
		  "    ele = input()",
		  "    Badminton.append(ele)  # adding the element",
		  "print(\"Original list of students playing badminton :\" +str(Badminton))",
		  "Badminton=removeDuplicate(Badminton)",
		  "print(\"The list of students playing badminton after removing duplicates : \" +str(Badminton))",
		  "",
		  "",
		  "flag=1",
		  "while flag==1:",
		  "    print(\"\\n\\n--------------------MENU--------------------\\n\")",
		  "    print(\"1. List of students who play both cricket and badminton\")",
		  "    print(\"2. List of students who play either cricket or badminton but not both\")",
		  "    print(\"3. List of students who play neither cricket nor badminton\")",
		  "    print(\"4. Number of students who play cricket and football but not badminton\")",
		  "    print(\"5. Exit\\n\")",
		  "    ch=int(input(\"Enter your Choice (from 1 to 5) :\"))",
		  "",
		  "    if ch==1:",
		  "        print(\"Number of students who play both cricket and badminton : \", CB(Cricket,Badminton))",
		  "        a = input(\"\\n\\nDo you want to continue (yes/no) :\")",
		  "        if a == \"yes\":",
		  "            flag = 1",
		  "        else:",
		  "            flag = 0",
		  "            print(\"Thanks for using this program!\")",
		  "",
		  "    elif ch==2:",
		  "        print(\"Number of students who play either cricket or badminton but not both : \", eCeB(Cricket, Badminton))",
		  "        a = input(\"\\n\\nDo you want to continue (yes/no) :\")",
		  "        if a == \"yes\":",
		  "            flag = 1",
		  "        else:",
		  "            flag = 0",
		  "            print(\"Thanks for using this program!\")",
		  "",
		  "    elif ch==3:",
		  "        print(\"Number of students who play neither cricket nor badminton : \", nCnB(SEComp,Cricket,Badminton))",
		  "        a = input(\"\\n\\nDo you want to continue (yes/no) :\")",
		  "        if a == \"yes\":",
		  "            flag = 1",
		  "        else:",
		  "            flag = 0",
		  "            print(\"Thanks for using this program!\")",
		  "",
		  "    elif ch==4:",
		  "        print(\"Number of students who play cricket and football but not badminton : \", CBnF(Cricket,Football,Badminton))",
		  "        a = input(\"\\n\\nDo you want to continue (yes/no) :\")",
		  "        if a == \"yes\":",
		  "            flag = 1",
		  "        else:",
		  "            flag = 0",
		  "            print(\"Thanks for using this program!\")",
		  "",
		  "    elif ch==5:",
		  "        flag=0",
		  "        print(\"Thanks for using this program!\")",
		  "",
		  "    else:",
		  "        print(\"!!Wrong Choice!! \")",
		  "        a=input(\"\\n\\nDo you want to continue (yes/no) :\")",
		  "        if a==\"yes\":",
		  "            flag=1",
		  "        else:",
		  "            flag=0",
		  "            print(\"Thanks for using this program!\")"
		],
		"description": "group_a1"
	  },
	  "group_a2": {
		"prefix": "~marks",
		"body": [
		  "def average(listofmarks):",
		  "    sum=0",
		  "    count=0",
		  "    for i in range(len(listofmarks)):",
		  "        if listofmarks[i]!=-999:",
		  "            sum+=listofmarks[i]",
		  "            count+=1",
		  "    avg=sum/count",
		  "    print(\"Total Marks : \", sum)",
		  "    print(\"Average Marks : {:.2f}\".format(avg))",
		  "",
		  "def Maximum(listofmarks):",
		  "    for i in range(len(listofmarks)):",
		  "        if listofmarks[i]!=-999:",
		  "            Max=listofmarks[0]",
		  "            break",
		  "    for i in range(1,len(listofmarks)):",
		  "        if listofmarks[i]>Max:",
		  "            Max=listofmarks[i]",
		  "    return(Max)",
		  "",
		  "def Minimum(listofmarks):",
		  "    for i in range(len(listofmarks)):",
		  "        if listofmarks[i]!=-999:",
		  "            Min=listofmarks[0]",
		  "            break",
		  "    for i in range(1,len(listofmarks)):",
		  "        if listofmarks[i]<Min:",
		  "            Min=listofmarks[i]",
		  "    return(Min)",
		  "",
		  "def absentcount(listofmarks):",
		  "    count=0",
		  "    for i in range(len(listofmarks)):",
		  "        if listofmarks[i]==-999:",
		  "            count+=1",
		  "    return(count)",
		  "",
		  "def maxFrequency(listofmarks):",
		  "    i=0",
		  "    Max=0",
		  "    print(\"Marks  |  Frequency\")",
		  "    for j in listofmarks:",
		  "        if (listofmarks.index(j)==i):",
		  "            print(j,\"    |  \",listofmarks.count(j))",
		  "            if listofmarks.count(j)>Max:",
		  "                Max=listofmarks.count(j)",
		  "                mark=j",
		  "        i=i+1",
		  "    return(mark,Max)",
		  "",
		  "marksinFDS=[]",
		  "numberofstudents=int(input(\"Enter total number of students : \"))",
		  "for i in range(numberofstudents):",
		  "    marks=int(input(\"Enter marks of student \"+str(i+1)+\" : \"))",
		  "    marksinFDS.append(marks)",
		  "",
		  "flag=1",
		  "while flag==1:",
		  "    print(\"\\n\\n--------------------Options--------------------\\n\")",
		  "    print(\"1. Total and Average Marks of the Class\")",
		  "    print(\"2. Highest and Lowest Marks in the Class\") ",
		  "    print(\"3. Number of Students absent for the test\")",
		  "    print(\"4. Marks with Highest Frequency\")",
		  "    print(\"5. Exit\\n\")",
		  "    ch=int(input(\"Enter your Choice (from 1 to 5) :\"))",
		  "",
		  "    if ch==1:",
		  "        average(marksinFDS)",
		  "        a = input(\"Do you want to continue (yes/no) :\")",
		  "        if a == \"yes\":",
		  "            flag = 1",
		  "        else:",
		  "            flag = 0",
		  "            print(\"Thanks for using this program!\")",
		  "",
		  "    elif ch==2:",
		  "        print(\"Highest Score in Class : \", Maximum(marksinFDS))",
		  "        print(\"Lowest Score in Class : \", Minimum(marksinFDS))",
		  "        a = input(\"Do you want to continue (yes/no) :\")",
		  "        if a == \"yes\":",
		  "            flag = 1",
		  "        else:",
		  "            flag = 0",
		  "            print(\"Thanks for using this program!\")",
		  "",
		  "    elif ch==3:",
		  "        print(\"Number of Students absent in the test : \", absentcount(marksinFDS))",
		  "        a = input(\"Do you want to continue (yes/no) :\")",
		  "        if a == \"yes\":",
		  "            flag = 1",
		  "        else:",
		  "            flag = 0",
		  "            print(\"Thanks for using this program!\")",
		  "",
		  "    elif ch==4:",
		  "        mark,fr = maxFrequency(marksinFDS)",
		  "        print(\"Highest frequency is of marks {0} that is {1} \".format(mark,fr))",
		  "        a = input(\"Do you want to continue (yes/no) :\")",
		  "        if a == \"yes\":",
		  "            flag = 1",
		  "        else:",
		  "            flag = 0",
		  "            print(\"Thanks for using this program!\")",
		  "",
		  "    elif ch==5:",
		  "        flag=0",
		  "        print(\"Thanks for using this program!\")",
		  "",
		  "    else:",
		  "        print(\"!!Wrong Choice!! \")",
		  "        a=input(\"Do you want to continue (yes/no) :\")",
		  "        if a==\"yes\":",
		  "            flag=1",
		  "        else:",
		  "            flag=0",
		  "            print(\"Thanks for using this program!\")",
		  ""
		],
		"description": "group_a2"
	  },
	  "group_a3": {
		"prefix": "~strings",
		"body": [
		  "sentence = input(\"Enter sentence: \")",
		  "",
		  "longest = max(sentence.split(), key=len)",
		  "",
		  "print(\"Longest word is: \", longest)",
		  "print(\"And its length is: \", len(longest))",
		  "",
		  "",
		  "# b) To determines the frequency of occurrence of particular character in the string",
		  "",
		  "# using naive method to get count of each element in string",
		  "all_freq = {}",
		  "",
		  "for i in sentence:",
		  "    if i in all_freq:",
		  "        all_freq[i] += 1",
		  "    else:",
		  "        all_freq[i] = 1",
		  "",
		  "# printing result",
		  "print(\"Count of all characters in sentence is :\\n \"",
		  "      + str(all_freq))",
		  "",
		  "",
		  "",
		  "",
		  "# c) To check whether given string is palindrome or not",
		  "",
		  "text=\"english\"",
		  "print(\"Given text is \"+text)",
		  "rev=reversed(text)",
		  "if list(text)==list(rev):",
		  "    print(\"its a palindrome\")",
		  "else:",
		  "    print(\"its not a palindrome\")",
		  "",
		  "",
		  "",
		  "# d) To display index of first appearance of the substring",
		  "",
		  "",
		  "sub_str1 =str(input(\"Enter word\"))",
		  "print(\"index of first appearance of the substring \"+sub_str1+\" is\")",
		  "print(sentence.find(sub_str1))",
		  "",
		  "#check if Substring found or not.",
		  "if(sentence.find(sub_str1)==-1):",
		  "    print(\"Substring Not Found\")",
		  "else:",
		  "    print(\"Substring found\")",
		  "",
		  "",
		  "",
		  "",
		  "#  e) To count the occurrences of each word in a given string.",
		  "",
		  "print(\"Following are the count the frequency of each word in a given string\")",
		  "def freq(sentence):",
		  "    # break the string into list of words",
		  "    sentence = sentence.split()",
		  "    str2 = []",
		  "",
		  "    # loop till string values present in list str",
		  "    for i in sentence:",
		  "",
		  "        # checking for the duplicacy",
		  "        if i not in str2:",
		  "            # insert value in str2",
		  "            str2.append(i)",
		  "",
		  "    for i in range(0, len(str2)):",
		  "        # count the frequency of each word(present in str2) in sentence and print",
		  "        print('count of frequency', str2[i], 'is :', sentence.count(str2[i]))",
		  "",
		  "def main():",
		  "    # call freq function",
		  "    freq(sentence)",
		  "",
		  "main()  # call main function"
		],
		"description": "group_a3"
	  },
	  "group_a4": {
		"prefix": "~bank",
		"body": [
		  "import random",
		  "print(\"What's your initial Bank Balance.\")",
		  "",
		  "while True:",
		  "    try:",
		  "        amount = float(input(\"\\nEnter the Initial amount : \"))",
		  "    except ValueError:",
		  "        print(\"\\nError.. Invalid Input. Please try again.\")",
		  "        continue",
		  "    except KeyboardInterrupt:",
		  "        print(\"\\nError.. Invalid Input. Please try again.\")",
		  "        continue",
		  "    if amount < 0:",
		  "        print(\"\\nError.. Invalid Input. Please try again.\")",
		  "        continue",
		  "    else:",
		  "        break",
		  "",
		  "Online = True",
		  "print(\"\\nWelcome to the Bank of Gladingi.\")",
		  "customer_name = str(input(\"Enter your Name : \"))",
		  "",
		  "while True:",
		  "    try:",
		  "        customer_age = int(input(\"Enter your age : \"))",
		  "    except ValueError:",
		  "        print(\"\\nError.. Invalid Input. please try again\")",
		  "        continue",
		  "    except KeyboardInterrupt:",
		  "        print(\"\\nError.. Invalid Input. please try again\")",
		  "        continue",
		  "    if customer_age < 18:",
		  "        print(\"You are underage for opening a bank account\")",
		  "        break",
		  "    else:",
		  "        print(\"\\nWelcome Sir.! Follow the below instructions for making transactions.\")",
		  "        break",
		  "",
		  "if customer_age >= 18:",
		  "",
		  "    print(\"\\nType : 1 - for Deposit \\nType : 2 - for Withdraw \\nType : 3 - for Bank Balance \\nType : 4 - for Exit\")",
		  "",
		  "    while Online:  ",
		  "        try:",
		  "            inpt = int(input(\"\\nEnter Option: \"))",
		  "        except ValueError:",
		  "            print(\"\\nError.. Invalid Input. Please try again.\")",
		  "            continue",
		  "        except KeyboardInterrupt:",
		  "            print(\"\\nError.. Invalid Input. Please try again.\")",
		  "            continue",
		  "        if not inpt:",
		  "            break",
		  "        if inpt == 1:",
		  "            while True:",
		  "                try:",
		  "                    deposit = float(input(\"\\nEnter the Deposit amount in Rs : \"))",
		  "                except ValueError:",
		  "                    print(\"\\nError.. Invalid Input. Please try again.\")",
		  "                    continue",
		  "                except KeyboardInterrupt:",
		  "                    print(\"\\nError.. Invalid Input. Please try again.\")",
		  "                    continue",
		  "                if deposit < 0:",
		  "                    print(\"\\nError.. Invalid Input. Please try again.\")",
		  "                    continue",
		  "                else:",
		  "                    break",
		  "            amount += deposit",
		  "            print(",
		  "                f\"\\nAmount deposited in your account is ₹ {format(deposit, '.2f')} \")",
		  "            print(f\"Remaining Bank Balance is ₹ {format(amount, '.2f')} \")",
		  "            print(\"\\nType : 1 - for Deposit \\nType : 2 - for Withdraw \\nType : 3 - for Bank Balance \\nType : 4 - for Exit\")",
		  "        elif inpt == 2:",
		  "            while True:",
		  "                try:",
		  "                    withdraw = float(input(\"\\nHow much will you withdraw? \"))",
		  "                except ValueError:",
		  "                    print(\"\\nError.. Invalid Input. Please try again.\")",
		  "                    continue",
		  "                except KeyboardInterrupt:",
		  "                    print(\"\\nError.. Invalid Input. Please try again.\")",
		  "                    continue",
		  "                else:",
		  "                    break",
		  "            if amount >= withdraw:",
		  "                amount -= withdraw",
		  "                print(",
		  "                    f\"\\nAmount withdrawn from your account is ₹ {format(withdraw, '.2f')} \")",
		  "                print(f\"Remaining Bank Balance is ₹ {format(amount, '.2f')} \")",
		  "                print(\"\\nType : 1 - for Deposit \\nType : 2 - for Withdraw \\nType : 3 - for Bank Balance \\nType : 4 - for Exit\")",
		  "            else:",
		  "                print(\"\\nError.. This transaction can not be processed.\")",
		  "                print(\"You don't have enough Balance to withdraw.\")",
		  "        elif inpt == 3:",
		  "            print(\"Your Bank Balance is ₹\", format(amount, '.2f'))",
		  "            print(\"\\nType : 1 - for Deposit \\nType : 2 - for Withdraw \\nType : 3 - for Bank Balance \\nType : 4 - for Exit\")",
		  "        elif inpt == 4:",
		  "            Online = False",
		  "",
		  "        else:",
		  "            print(\"You have entered wrong Input, Please try again.\")",
		  "else:",
		  "    print(\"\\nAsk your Parents for it.\")",
		  "",
		  "print(\"\\nThankyou for Banking with Us..! Have a Good day.\")"
		],
		"description": "group_a4"
	  },
	  "Practical 5B(a)": {
		"prefix": "~linear",
		"body": [
		  "roll=[];",
		  "roll=[int(items) for items in input(\"Enter the roll numbers of students \").split()];",
		  "target_roll=int(input(\"Enter the roll number to be searched: \"));",
		  "",
		  "#----------------------Linear Serach-------------------------------",
		  "flag=0;",
		  "for i in range(len(roll)):",
		  "    if(roll[i]==target_roll):",
		  "        flag=1;",
		  "        break;",
		  "if(flag):",
		  "    print(\"Student attended the training program\");",
		  "else:",
		  "    print(\"student did not attend the training program\");",
		  "#----------------------Linear Serach-------------------------------",
		  "",
		  "#----------------------Sentinal Search-----------------------------",
		  "# key=int(input(\"Enter the element to be searched: \"));",
		  "last=roll[len(roll)-1];",
		  "roll[len(roll)-1]=target_roll;",
		  "i=0;",
		  "while(roll[i]!=target_roll):",
		  "    i+=1;",
		  "roll[len(roll)-1]=last;",
		  "if(i<len(roll)-1 or roll[len(roll)-1]==target_roll):",
		  "    print(\"Student attended the training program\");",
		  "else:",
		  "    print(\"student did not attend the training program\");",
		  "#----------------------Sentinal Search-----------------------------"
		],
		"description": "Practical 5B(a)"
	  },
	  "Practical 5B(b)": {
		"prefix": "~binary",
		"body": [
		  "#---------------------Binary Search-------------------------------",
		  "low=0;",
		  "high=len(roll)-1;",
		  "while(low<=high):",
		  "    mid=(low+high)//2;",
		  "    if(roll[mid]==target_roll):",
		  "        print(\"element found\");",
		  "        exit();",
		  "    elif(roll[mid]>target_roll):",
		  "        high=mid-1;",
		  "    else:",
		  "        low=mid+1;",
		  "print(\"element not found\");",
		  "",
		  "#---------------------Binary Search-------------------------------",
		  "",
		  "#---------------------Fibonacci Search----------------------------",
		  "def fib(roll,target_roll):",
		  "    fn2=0;",
		  "    fn1=1;",
		  "    fn=fn1+fn2;",
		  "    while(fn<len(roll)):",
		  "        fn2=fn1;",
		  "        fn1=fn;",
		  "        fn=fn1+fn2;",
		  "    offset=-1;",
		  "    while(fn>1):",
		  "        i=min(offset+fn2,len(roll)-1);",
		  "",
		  "        if(roll[i]<target_roll):",
		  "            fn=fn1;",
		  "            fn1=fn2;",
		  "            fn2=fn-fn1;",
		  "            offset=i;",
		  "        elif(roll[i]>target_roll):",
		  "            fn=fn2;",
		  "            fn1=fn1-fn2;",
		  "            fn2=fn-fn1;",
		  "        else:",
		  "            print(\"element found\");",
		  "            exit();",
		  "    print(\"element not found\");",
		  "fib(roll, target_roll);",
		  "#---------------------Fibonacci Search----------------------------"
		],
		"description": "Practical 5B(b)"
	  },
	  "group_b6": {
		"prefix": "~selection",
		"body": [
		  "def Selection_Sort(marks):",
		  "    for i in range(len(marks)):",
		  "",
		  "        # Find the minimum element in remaining unsorted array",
		  "        min_idx = i",
		  "        for j in range(i + 1, len(marks)):",
		  "            if marks[min_idx] > marks[j]:",
		  "                min_idx = j",
		  "",
		  "        # Swap the minimum element with the first element",
		  "        marks[i], marks[min_idx] = marks[min_idx], marks[i]",
		  "",
		  "    print(\"Marks of students after performing Selection Sort on the list : \")",
		  "    for i in range(len(marks)):",
		  "        print(marks[i])",
		  "",
		  "",
		  "# Function for Bubble Sort of elements",
		  "def Bubble_Sort(marks):",
		  "    n = len(marks)",
		  "    # Traverse through all array elements",
		  "    for i in range(n - 1):",
		  "        # Last i elements are already in place",
		  "        for j in range(0, n - i - 1):",
		  "",
		  "            if marks[j] > marks[j + 1]:",
		  "                marks[j], marks[j + 1] = marks[j + 1], marks[j]",
		  "",
		  "    print(\"Marks of students after performing Bubble Sort on the list :\")",
		  "    for i in range(len(marks)):",
		  "        print(marks[i])",
		  "",
		  "",
		  "# Function for displaying top five marks",
		  "",
		  "def top_five_marks(marks):",
		  "    print(\"Top\",len(marks),\"Marks are : \")",
		  "    print(*marks[::-1], sep=\"\\n\")",
		  "",
		  "marks=[]",
		  "n = int(input(\"Enter number of students whose marks are to be displayed : \"))",
		  "print(\"Enter marks for\",n,\"students (Press ENTER after every students marks): \")",
		  "for i in range(0, n):",
		  "    ele = int(input())",
		  "    marks.append(ele)  # adding the element",
		  "",
		  "print(\"The marks of\",n,\"students are : \")",
		  "print(marks)",
		  "",
		  "flag=1;",
		  "while flag==1:",
		  "    print(\"\\n---------------MENU---------------\")",
		  "    print(\"1. Selection Sort of the marks\")",
		  "    print(\"2. Bubble Sort of the marks\")",
		  "    print(\"3. Exit\")",
		  "    ch=int(input(\"\\n\\nEnter your choice (from 1 to 3) : \"))",
		  "",
		  "    if ch==1:",
		  "        Selection_Sort(marks)",
		  "        a=input(\"\\nDo you want to display top marks from the list (yes/no) : \")",
		  "        if a=='yes':",
		  "            top_five_marks(marks)",
		  "        else:",
		  "            print(\"\\nThanks for using this program!\")",
		  "            flag=0",
		  "",
		  "    elif ch==2:",
		  "        Bubble_Sort(marks)",
		  "        a = input(\"\\nDo you want to display top five marks from the list (yes/no) : \")",
		  "        if a == 'yes':",
		  "            top_five_marks(marks)",
		  "        else:",
		  "            print(\"\\nThanks for using this program!\")",
		  "            flag = 0",
		  "",
		  "    elif ch==3:",
		  "        print(\"\\nThanks for using this program!!\")",
		  "        flag=0",
		  "",
		  "    else:",
		  "        print(\"\\nEnter a valid choice!!\")",
		  "        print(\"\\nThanks for using this program!!\")",
		  "        flag=0"
		],
		"description": "group_b6"
	  },
	  "group_b7": {
		"prefix": "~quick",
		"body": [
		  "def input_percentage():",
		  "    perc = []",
		  "    number_of_students = int(input(\"Enter the number of Students : \"))",
		  "    for i in range(number_of_students):",
		  "        perc.append(float(input(\"Enter the percentage of Student : \")))",
		  "    return perc",
		  "",
		  "",
		  "def print_percentage(perc):",
		  "    for i in range(len(perc)):",
		  "        print(perc[i],sep = \"\\n\")",
		  "",
		  "",
		  "def percentage_partition(perc,start,end):",
		  "    pivot = perc[start]",
		  "    lower_bound = start + 1",
		  "    upper_bound = end",
		  "",
		  "    while True:",
		  "        while lower_bound <= upper_bound and perc[lower_bound] <= pivot:",
		  "            lower_bound += 1",
		  "",
		  "        while lower_bound <= upper_bound and perc[upper_bound] >= pivot:",
		  "            upper_bound -= 1",
		  "",
		  "        if lower_bound <= upper_bound:",
		  "            perc[lower_bound],perc[upper_bound] = perc[upper_bound],perc[lower_bound]",
		  "",
		  "        else:",
		  "            break",
		  "",
		  "",
		  "    perc[start],perc[upper_bound] = perc[upper_bound],perc[start]",
		  "",
		  "    return upper_bound",
		  "",
		  "",
		  "def Quick_Sort(perc,start,end):",
		  "    while start < end:",
		  "        partition = percentage_partition(perc,start,end)",
		  "        Quick_Sort(perc,start,partition-1)",
		  "        Quick_Sort(perc,partition+1,end)",
		  "        return perc",
		  "",
		  "",
		  "def display_top_five(perc):",
		  "    print(\"Top Five Percentages are : \")",
		  "    if len(perc) < 5:",
		  "        start, stop = len(perc) - 1, -1",
		  "    else:",
		  "        start, stop = len(perc) - 1, len(perc) - 6",
		  "",
		  "    for i in range(start, stop, -1):",
		  "        print(perc[i],sep = \"\\n\")",
		  "",
		  "",
		  "unsorted_percentage = []",
		  "sorted_percentage = []",
		  "flag = 1",
		  "",
		  "while flag == 1:",
		  "    print(\"\\n--------------------MENU--------------------\")",
		  "    print(\"1. Accept the Percentage of Students\")",
		  "    print(\"2. Display the Unsorted Percentages of Students\")",
		  "    print(\"3. Perform Quick Sort on the Data\")",
		  "    print(\"4. Exit\")",
		  "",
		  "    ch = int(input(\"Enter your choice (from 1 to 4) : \"))",
		  "",
		  "    if ch == 1:",
		  "        unsorted_percentage = input_percentage()",
		  "",
		  "    elif ch == 2:",
		  "        print_percentage(unsorted_percentage)",
		  "",
		  "    elif ch == 3:",
		  "        print(\"Percentages of Students after performing Quick Sort : \")",
		  "        sorted_percentage = Quick_Sort(unsorted_percentage,0,len(unsorted_percentage)-1)",
		  "        print_percentage(sorted_percentage)",
		  "        a = input(\"Do you want to display the Top 5 Percentages of Students (yes/no) : \")",
		  "        if a == 'yes':",
		  "            display_top_five(sorted_percentage)",
		  "",
		  "    elif ch == 4:",
		  "        print(\"Thanks for using this program!!\")",
		  "        flag = 0",
		  "",
		  "    else:",
		  "        print(\"Invalid Choice!!\")"
		],
		"description": "group_b7"
	  }
}
