{
	"pinnacleclub": {
		"prefix": "~pinnacle",
		"body": [
		  "#include <iostream>",
		  "#include <string.h>",
		  "using namespace std;",
		  "class node {",
		  "  friend class list;",
		  "  int prnno;",
		  "  char name[30];",
		  "  node *next; // pointer to object",
		  "public:",
		  "  node(int d, char s[10]) {",
		  "    prnno = d;",
		  "    strcpy(name, s);",
		  "    next = NULL;",
		  "  }",
		  "};",
		  "class list {",
		  "  node *start;",
		  "",
		  "public:",
		  "  list() { start = NULL; }",
		  "",
		  "  void display() {",
		  "    node *ptr;",
		  "    ptr = start;",
		  "    cout << \"\\nInfo is : \\n\";",
		  "    while (ptr != NULL) {",
		  "      cout << \"\\n\" << ptr->prnno;",
		  "      cout << \"\\t\" << ptr->name;",
		  "      ptr = ptr->next;",
		  "    }",
		  "  }",
		  "",
		  "  void insertmember();",
		  "  void createmember();",
		  "  void insertpresident();",
		  "  void insertsecretary();",
		  "  void deletemember();",
		  "  void delete1();",
		  "  void deletesecretary();",
		  "  void deletepresident();",
		  "  void count();",
		  "  void reverse(node *);",
		  "  void reverse1() { reverse(start); }",
		  "  void concatinate(list, list);",
		  "};",
		  "",
		  "void list::insertmember() {",
		  "  int prnno;",
		  "  char name[30];",
		  "  node *ptr, *temp;",
		  "  cout << \"\\nEnter PRN No : \";",
		  "  cin >> prnno;",
		  "  cout << \"\\nEnter Name : \";",
		  "  cin >> name;",
		  "  temp = new node(prnno, name);",
		  "  if (start == NULL) {",
		  "    start = temp;",
		  "  } else {",
		  "    ptr = start;",
		  "    while (ptr->next != NULL) {",
		  "      ptr = ptr->next;",
		  "    }",
		  "    ptr->next = temp;",
		  "  }",
		  "}",
		  "",
		  "void list::insertpresident() {",
		  "  int prnno;",
		  "  char name[30];",
		  "  node *temp;",
		  "  cout << \"\\nEnter PRN No : \";",
		  "  cin >> prnno;",
		  "  cout << \"\\nEnter Name : \";",
		  "  cin >> name;",
		  "  temp = new node(prnno, name);",
		  "  temp->next = start;",
		  "  start = temp;",
		  "}",
		  "",
		  "void list::insertsecretary() {",
		  "  int prnno;",
		  "  char name[30];",
		  "  node *ptr, *temp;",
		  "  cout << \"\\nEnter PRN No : \";",
		  "  cin >> prnno;",
		  "  cout << \"\\nEnter Name : \";",
		  "  cin >> name;",
		  "  temp = new node(prnno, name);",
		  "  ptr = start;",
		  "  while (ptr->next != NULL) {",
		  "    ptr = ptr->next;",
		  "  }",
		  "  ptr->next = temp;",
		  "}",
		  "",
		  "void list::createmember() {",
		  "  int ch;",
		  "  char ans;",
		  "  do {",
		  "    cout << \"\\nChoose from the below Options : \";",
		  "    cout << \"\\n1 - Member\\n 2 - Secretary\\n 3 - President\";",
		  "    cin >> ch;",
		  "    switch (ch) {",
		  "    case 1:",
		  "      insertmember();",
		  "      break;",
		  "    case 2:",
		  "      insertsecretary();",
		  "      break;",
		  "    case 3:",
		  "      insertpresident();",
		  "      break;",
		  "    default:",
		  "      cout << \"Invalid Input! \";",
		  "      break;",
		  "    }",
		  "    cout << \"\\nDo you want to continue(y/n) : \";",
		  "    cin >> ans;",
		  "  } while (ans == 'y');",
		  "}",
		  "",
		  "void list::delete1() {",
		  "  int ch;",
		  "  char ans;",
		  "  do {",
		  "    cout << \"\\nChoose from the below Options : \";",
		  "    cout << \"\\n1 - Member\\n 2 - Secretary\\n 3 - President\";",
		  "    cin >> ch;",
		  "    switch (ch) {",
		  "    case 1:",
		  "      deletemember();",
		  "      break;",
		  "    case 2:",
		  "      deletesecretary();",
		  "      break;",
		  "    case 3:",
		  "      deletepresident();",
		  "      break;",
		  "    default:",
		  "      cout << \"Invalid Input!\";",
		  "      break;",
		  "    }",
		  "    cout << \"\\nDo you want to continue(y/n) : \";",
		  "    cin >> ans;",
		  "  } while (ans == 'y');",
		  "}",
		  "",
		  "void list::deletesecretary() {",
		  "  node *ptr, *prev;",
		  "  ptr = start;",
		  "  while (ptr->next != NULL) {",
		  "    prev = ptr;",
		  "    ptr = ptr->next;",
		  "  }",
		  "  prev->next = NULL;",
		  "  delete ptr;",
		  "  cout << \"\\nDeleted\";",
		  "}",
		  "",
		  "void list::deletepresident() {",
		  "  node *ptr;",
		  "  ptr = start;",
		  "  start = start->next;",
		  "  delete ptr;",
		  "  cout << \"\\nDeleted\";",
		  "}",
		  "",
		  "void list::deletemember() {",
		  "  node *ptr, *prev;",
		  "  int p;",
		  "  cout << \"\\nEnter PRN No. to Delete : \";",
		  "  cin >> p;",
		  "  ptr = start;",
		  "  while (ptr->next != NULL) {",
		  "    prev = ptr;",
		  "    ptr = ptr->next;",
		  "    if (ptr->prnno == p)",
		  "      break;",
		  "  }",
		  "  if (ptr->next == NULL) {",
		  "    cout << \"\\nData not found!\";",
		  "  } else if (ptr->prnno == p) {",
		  "    prev->next = ptr->next;",
		  "    ptr->next = NULL;",
		  "    delete ptr;",
		  "    cout << \"\\nDeleted\";",
		  "  }",
		  "}",
		  "",
		  "void list::count() {",
		  "  node *ptr;",
		  "  int cnt = 0;",
		  "  ptr = start;",
		  "  while (ptr != NULL) {",
		  "    cnt++;",
		  "    ptr = ptr->next;",
		  "  }",
		  "  cout << \"\\n Total No. of Nodes is : \" << cnt;",
		  "}",
		  "",
		  "void list::reverse(node *ptr) {",
		  "  if (ptr == NULL)",
		  "    return;",
		  "  else {",
		  "    reverse(ptr->next);",
		  "  }",
		  "  cout << \"\\n\" << ptr->prnno;",
		  "  cout << \"\\t\" << ptr->name;",
		  "}",
		  "",
		  "void list::concatinate(list s1, list s2) {",
		  "  node *ptr;",
		  "  ptr = s1.start;",
		  "  while (ptr->next != NULL)",
		  "    ptr = ptr->next;",
		  "  ptr->next = s2.start;",
		  "  s1.display();",
		  "}",
		  "",
		  "int main() {",
		  "  int ch;",
		  "  char ans;",
		  "  list sll1, sll2, s1, s2;",
		  "  do {",
		  "    cout << \"\\n1 - Create Member\\n2 - Display\\n3 - Delete Member\\n4 - No. of \"",
		  "            \"Nodes\\n5 - Reverse\\n6 - Concatenate\"<<endl;",
		  "    cout << \"\\nChoose from the above Options : \"<<endl;",
		  "    cin >> ch;",
		  "    switch (ch) {",
		  "    case 1:",
		  "      sll1.createmember();",
		  "      break;",
		  "    case 2:",
		  "      sll1.display();",
		  "      break;",
		  "    case 3:",
		  "      cout << \"\\nEnter the Nodes to be deleted in list : \";",
		  "      sll1.delete1();",
		  "      break;",
		  "    case 4:",
		  "      cout << \"\\nNo. of Nodes is : \";",
		  "      sll1.count();",
		  "      break;",
		  "    case 5:",
		  "      cout << \"\\nReversed list is : \";",
		  "      sll1.reverse1();",
		  "      break;",
		  "    case 6:",
		  "      sll2.createmember();",
		  "      sll1.concatinate(sll1, sll2);",
		  "      break;",
		  "    default:",
		  "      cout << \"\\nInvalid Input!\";",
		  "      break;",
		  "    }",
		  "    cout << \"\\n\\nDo you want to continue with the club management? \";",
		  "    cin >> ans;",
		  "  } while (ans == 'y');",
		  "  return 0;",
		  "}"
		],
		"description": "pinnacleclub"
	  },
	  "ticketbooking": {
		"prefix": "~cinemax",
		"body": [
		  "#include <iostream>",
		  "#include <stdlib.h>",
		  "using namespace std;",
		  "class node {",
		  "public:",
		  "  node *next;",
		  "  node *prev;",
		  "  int seat;",
		  "  string id;",
		  "  int status;",
		  "};",
		  "class cinemax {",
		  "public:",
		  "  node *head, *tail, *temp;",
		  "  cinemax() { head = NULL; }",
		  "  void create_list();",
		  "  void display();",
		  "  void book();",
		  "  void cancel();",
		  "  void avail();",
		  "};",
		  "void cinemax::create_list() {",
		  "  int i = 1;",
		  "  temp = new node;",
		  "  temp->seat = 1;",
		  "  temp->status = 0;",
		  "  temp->id = \"null\";",
		  "  tail = head = temp;",
		  "  for (int i = 2; i <= 70; i++) {",
		  "    node *p;",
		  "    p = new node;",
		  "    p->seat = i;",
		  "    p->status = 0;",
		  "    p->id = \"null\";",
		  "    tail->next = p;",
		  "    p->prev = tail;",
		  "    tail = p;",
		  "    tail->next = head;",
		  "    head->prev = tail;",
		  "  }",
		  "}",
		  "void cinemax::display() {",
		  "  {",
		  "    int r = 1;",
		  "    node *temp;",
		  "    temp = head;",
		  "    int count = 0;",
		  "    cout << \"\\n----------------------------------------------------------------\"",
		  "            \"--------------------\\n\";",
		  "    cout << \" Screen this way \\n \";",
		  "        cout",
		  "         << \"------------------------------------------------------------------\"",
		  "            \"------------------\\n\";",
		  "    while (temp->next != head) {",
		  "      if (temp->seat / 10 == 0)",
		  "        cout << \"S0\" << temp->seat << \" :\";",
		  "      else",
		  "        cout << \"S\" << temp->seat << \" :\";",
		  "",
		  "      if (temp->status == 0)",
		  "        cout << \"|___| \";",
		  "      else",
		  "        cout << \"|_B_| \";",
		  "      count++;",
		  "      if (count % 7 == 0) {",
		  "        cout << endl;",
		  "        r++;",
		  "      }",
		  "      temp = temp->next;",
		  "    }",
		  "    cout << \"S\" << temp->seat << \" :\";",
		  "    if (temp->status == 0)",
		  "      cout << \"|___| \";",
		  "    else",
		  "      cout << \"|_B_| \";",
		  "  }",
		  "}",
		  "void cinemax::book() {",
		  "  int x;",
		  "  string y;",
		  "label:",
		  "  cout << \"\\n\\n\\nEnter seat number to be booked\\n\";",
		  "  cin >> x;",
		  "  cout << \"Enter your ID number\\n\";",
		  "  cin >> y;",
		  "  if (x < 1 || x > 70) {",
		  "    cout << \"Enter correct seat number to book (1-70)\\n\";",
		  "    goto label;",
		  "  }",
		  "  node *temp;",
		  "  temp = new node;",
		  "  temp = head;",
		  "  while (temp->seat != x) {",
		  "    temp = temp->next;",
		  "  }",
		  "",
		  "  if (temp->status == 1)",
		  "    cout << \"Seat already booked!\\n\";",
		  "  else {",
		  "    temp->status = 1;",
		  "    temp->id = y;",
		  "    cout << \"Seat \" << x << \" booked!\\n\";",
		  "  }",
		  "}",
		  "void cinemax::cancel() {",
		  "  int x;",
		  "  string y;",
		  "label1:",
		  "  cout << \"Enter seat number to cancel booking\\n\";",
		  "  cin >> x;",
		  "  cout << \"Enter you ID\\n\";",
		  "  cin >> y;",
		  "  if (x < 1 || x > 70) {",
		  "    cout << \"Enter correct seat number to cancel (1-70)\\n\";",
		  "    goto label1;",
		  "  }",
		  "  node *temp;",
		  "  temp = new node;",
		  "  temp = head;",
		  "  while (temp->seat != x) {",
		  "    temp = temp->next;",
		  "  }",
		  "  if (temp->status == 0) {",
		  "    cout << \"Seat not booked yet!!\\n\";",
		  "  } else {",
		  "    if (temp->id == y) {",
		  "      temp->status = 0;",
		  "      cout << \"Seat Cancelled!\\n\";",
		  "    }",
		  "",
		  "    else",
		  "      cout << \"Wrong User ID !!! Seat cannot be cancelled!!!\\n\";",
		  "  }",
		  "}",
		  "void cinemax::avail() {",
		  "  int r = 1;",
		  "  node *temp;",
		  "  temp = head;",
		  "  int count = 0;",
		  "  cout << \"\\n\\n\\n\\n\";",
		  "  cout << \"\\n------------------------------------------------------------------\"",
		  "          \"------------------\\n\";",
		  "  cout << \" Screen this way \\n\";",
		  "  cout << \"--------------------------------------------------------------------\"",
		  "          \"----------------\\n\";",
		  "  while (temp->next != head) {",
		  "    {",
		  "      if (temp->seat / 10 == 0)",
		  "        cout << \"S0\" << temp->seat << \" :\";",
		  "      else",
		  "        cout << \"S\" << temp->seat << \" :\";",
		  "      if (temp->status == 0)",
		  "        cout << \"|___| \";",
		  "      else if (temp->status == 1)",
		  "        cout << \" \";",
		  "",
		  "      count++;",
		  "      if (count % 7 == 0)",
		  "",
		  "      {",
		  "",
		  "        cout << endl;",
		  "      }",
		  "    }",
		  "    temp = temp->next;",
		  "  }",
		  "  if (temp->status == 0) {",
		  "    cout << \"S\" << temp->seat << \" :\";",
		  "",
		  "    if (temp->status == 0)",
		  "      cout << \"|___| \";",
		  "  }",
		  "}",
		  "int main() {",
		  "  cinemax obj;",
		  "  obj.create_list();",
		  "  int ch;",
		  "  char c = 'y';",
		  "  while (c == 'y') {",
		  "    obj.display();",
		  "    cout << \"\\n*********************************************\\n\";",
		  "    cout << \" CINEMAX MOVIE THEATRE\\n\";",
		  "    cout << \"*********************************************\\n\";",
		  "    cout << \"\\nEnter Choice\\n1.Current SeatStatus\\n2.Book Seat \\n3.Available \"",
		  "            \"Seat\\n4.CancelSeat\\n\";",
		  "    cin >> ch;",
		  "    switch (ch) {",
		  "    case 1:",
		  "      obj.display();",
		  "      break;",
		  "    case 2:",
		  "      obj.book();",
		  "      break;",
		  "    case 3:",
		  "      obj.avail();",
		  "      break;",
		  "    case 4:",
		  "      obj.cancel();",
		  "      break;",
		  "    default:",
		  "      cout << \"Wrong choice input\\n\";",
		  "    }",
		  "    cout << \"\\nDo you want to perform any other operation : (y/n)\\n\";",
		  "    cin >> c;",
		  "  }",
		  "  return 0;",
		  "}"
		],
		"description": "ticketbooking"
	  },
	  "appointmentbooking": {
		"prefix": "~appointment",
		"body": [
		  "#include <iostream>",
		  "using namespace std;",
		  "",
		  "int Size; // No of Nodes or Appointments",
		  "",
		  "struct SLL_Node // Node Structure of each Appointment",
		  "{",
		  "  int start;",
		  "  int end;",
		  "  int min;",
		  "  int max;",
		  "  int flag;",
		  "  struct SLL_Node *next;",
		  "} *head;",
		  "",
		  "class App_Shedule {",
		  "public:",
		  "  void create_Shed();",
		  "  void display_Shed();",
		  "  void book_App();",
		  "  void cancel_App();",
		  "  void sort_App();",
		  "} A1;",
		  "",
		  "int main() {",
		  "  int ch;",
		  "  char ans;",
		  "",
		  "  do{",
		  "    cout << \"\\n1. Create Appointment Schedule\";",
		  "    cout << \"\\n2. Display Free Slots\";",
		  "    cout << \"\\n3. Book an Appointment\";",
		  "    cout << \"\\n4. Cancel an Appointment\";",
		  "    cout << \"\\n5. Sort slots based on Time\";",
		  "    cout<<endl<<endl;",
		  "    cout << \"Enter your choice: \";",
		  "    cin >> ch;",
		  "",
		  "    switch (ch){",
		  "    case 1:",
		  "      A1.create_Shed();",
		  "      break;",
		  "",
		  "    case 2:",
		  "      A1.display_Shed();",
		  "      break;",
		  "",
		  "    case 3:",
		  "      A1.book_App();",
		  "      break;",
		  "",
		  "    case 4:",
		  "      A1.cancel_App();",
		  "      break;",
		  "",
		  "    case 5:",
		  "      A1.sort_App();",
		  "      break;",
		  "",
		  "    default:",
		  "      cout << \"\\n\\t Wrong choice!!!\";",
		  "    }",
		  "",
		  "    cout << \"\\n\\n\\t Do you wanna continue? (y/n) : \";",
		  "    cin >> ans;",
		  "  }while (ans == 'y');",
		  "}",
		  "",
		  "void App_Shedule::create_Shed() // Function Definition to create Appointment",
		  "                                // Schedule",
		  "{",
		  "  int i;",
		  "  struct SLL_Node *temp, *last;",
		  "",
		  "  head = NULL;",
		  "",
		  "  cout << \"\\n\\n\\t How many Appointment Slots: \";",
		  "  cin >> Size;",
		  "",
		  "  for (i = 0; i < Size; i++) {",
		  "    temp = new (struct SLL_Node); // Step 1: Dynamic Memory Allocation",
		  "",
		  "    cout << \"\\n\\n\\t Enter Start Time: \"; // Step 2: Assign Data & Address",
		  "    cin >> temp->start;",
		  "    cout << \"\\n\\t Enter End Time: \";",
		  "    cin >> temp->end;",
		  "    cout << \"\\n\\n\\t Enter Minimum Duration: \";",
		  "    cin >> temp->min;",
		  "    cout << \"\\n\\t Enter Maximum Duration: \";",
		  "    cin >> temp->max;",
		  "    temp->flag = 0;",
		  "    temp->next = NULL;",
		  "",
		  "    if (head == NULL) {",
		  "      head = temp;",
		  "      last = head;",
		  "    } else {",
		  "      last->next = temp;",
		  "      last = last->next;",
		  "    }",
		  "  }",
		  "}",
		  "",
		  "void App_Shedule::display_Shed() // Function Definition to Display Appointment",
		  "                                 // Schedule",
		  "{",
		  "  int cnt = 1;",
		  "  struct SLL_Node *temp;",
		  "",
		  "  cout << \"\\n\\n\\t ****Appointment Schdule****\";",
		  "  cout << \"\\n\\n\\t Srno.\\tStart\\tEnd\\tMin_Dur\\tMax_Dur\\tStatus\";",
		  "",
		  "  temp = head;",
		  "  while (temp != NULL) {",
		  "    cout << \"\\n\\n\\t \" << cnt;",
		  "    cout << \"\\t \" << temp->start;",
		  "    cout << \"\\t \" << temp->end;",
		  "    cout << \"\\t  \" << temp->min;",
		  "    cout << \"\\t  \" << temp->max;",
		  "",
		  "    if (temp->flag)",
		  "      cout << \"\\t-Booked-\";",
		  "    else",
		  "      cout << \"\\t--Free--\";",
		  "",
		  "    temp = temp->next;",
		  "    cnt++;",
		  "  }",
		  "}",
		  "",
		  "void App_Shedule::book_App() // Function Definition to Book Appointment",
		  "{",
		  "  int start;",
		  "  struct SLL_Node *temp;",
		  "",
		  "  cout << \"\\n\\n\\t Please enter Appointment time: \";",
		  "  cin >> start;",
		  "",
		  "  temp = head;",
		  "",
		  "  while (temp != NULL) {",
		  "    if (start == temp->start) {",
		  "      if (temp->flag == 0) {",
		  "        cout << \"\\n\\n\\t Appointment Slot is Booked!!!\";",
		  "        temp->flag = 1;",
		  "      } else",
		  "        cout << \"\\n\\n\\t Appointment Slot is not Available!!!\";",
		  "    }",
		  "",
		  "    temp = temp->next;",
		  "  }",
		  "}",
		  "",
		  "void App_Shedule::cancel_App() // Function Defination to Cancel Appointment",
		  "{",
		  "  int start;",
		  "  struct SLL_Node *temp;",
		  "",
		  "  cout << \"\\n\\n\\t Please enter Appointment time to Cancel: \";",
		  "  cin >> start;",
		  "",
		  "  temp = head;",
		  "",
		  "  while (temp != NULL) {",
		  "    if (start == temp->start) {",
		  "      if (temp->flag == 1) {",
		  "        cout << \"\\n\\n\\t Your Appointment Slot is Canceled!!!\";",
		  "        temp->flag = 0;",
		  "      } else",
		  "        cout << \"\\n\\n\\t Your Appointment was not Booked!!!\";",
		  "    }",
		  "",
		  "    temp = temp->next;",
		  "  }",
		  "}",
		  "",
		  "void App_Shedule::sort_App() // Function Definition to Sort Appointments",
		  "{",
		  "  int i, j, val;",
		  "  struct SLL_Node *temp;",
		  "",
		  "  for (i = 0; i < Size - 1; i++) {",
		  "    temp = head;",
		  "    while (temp->next != NULL) {",
		  "      if (temp->start > temp->next->start) {",
		  "        val = temp->start;",
		  "        temp->start = temp->next->start;",
		  "        temp->next->start = val;",
		  "",
		  "        val = temp->end;",
		  "        temp->end = temp->next->end;",
		  "        temp->next->end = val;",
		  "",
		  "        val = temp->min;",
		  "        temp->min = temp->next->min;",
		  "        temp->next->min = val;",
		  "",
		  "        val = temp->max;",
		  "        temp->max = temp->next->max;",
		  "        temp->next->max = val;",
		  "      }",
		  "      temp = temp->next;",
		  "    }",
		  "  }",
		  "    cout<<endl<<endl;",
		  "    cout << \"The Appointments got Sorted!!!\";",
		  "}"
		],
		"description": "appointmentbooking"
	  },
	  "paranthesizeexpression": {
		"prefix": "~parenthesize",
		"body": [
		  "#include<iostream>",
		  "using namespace std;",
		  "const int MAX=20;",
		  "class Stack",
		  "{",
		  " char str[MAX];",
		  " int top;",
		  " public:",
		  "     Stack()",
		  "     {",
		  "        top=-1;",
		  "      }",
		  "     void push(char ch);",
		  "     char pop();",
		  "     bool isEmpty();",
		  "     bool isFull();",
		  "     void display();",
		  "     void checkParenthesis();",
		  "};",
		  "bool Stack::isEmpty()",
		  "{",
		  " if(top==-1)",
		  "     return 1;",
		  " else return 0;",
		  "}",
		  "",
		  "bool Stack::isFull()",
		  "{",
		  " if(top==MAX-1)",
		  "     return 1;",
		  " else",
		  "     return 0;",
		  "}",
		  "",
		  "void Stack :: display()",
		  "{",
		  " if(isEmpty()==1)",
		  "     cout<<\"\\nStack is empty\";",
		  " else",
		  " {",
		  "     for(int i=0;i<=top;i++)",
		  "     {",
		  "          cout<<\" \"<<str[i];",
		  "     }",
		  " }",
		  "}",
		  "void Stack::push(char ch)",
		  "{",
		  " if(!isFull())",
		  " {",
		  "     top++;",
		  "     str[top]=ch;",
		  " }",
		  "}",
		  "",
		  "char Stack::pop()",
		  "{",
		  " if(!isEmpty())",
		  " {",
		  "     char ch=str[top];",
		  "     top--;",
		  "     return ch;",
		  " }",
		  " else",
		  " {",
		  "     return '\\0';",
		  " }",
		  "}",
		  "",
		  "void Stack::checkParenthesis()",
		  "{",
		  " cout<<\"\\nEnter # as a deliminator after expression(At the end)\\n\";",
		  " cout<<\"\\nEnter Expression: \";",
		  " cin.getline(str,MAX,'#');",
		  " char ch;",
		  " bool flag=0;",
		  " for(int i=0;str[i]!='\\0';i++)",
		  " {",
		  "     if(str[i]=='(' || str[i]=='[' || str[i]=='{')",
		  "         push(str[i]);",
		  "     if(str[i]==')'||str[i]==']'||str[i]=='}')",
		  "     {",
		  "         ch=pop();",
		  "         if((str[i]==')'&& ch!='(') ||(str[i]==']'&& ch!='[')||(str[i]=='}'&& ch!='{'))",
		  "         {",
		  "             cout<<\"\\nNot parenthesized At \"<<i<<\" = \"<<str[i];",
		  "             flag=1;",
		  "             break;",
		  "         }",
		  "     }",
		  " }",
		  " if(isEmpty()==1 && flag==0)",
		  "     cout<<\"\\nExpresseion is Well Parenthesized.\";",
		  " else",
		  "     cout<<\"\\nExpression is not Well Parenthesized.\";",
		  "}",
		  "",
		  "int main()",
		  "{",
		  "",
		  " int choice;",
		  " do",
		  " {",
		  "     Stack s;",
		  "     s.checkParenthesis();",
		  "     cout<<\"\\nDO you want to continue?{1/0)\";",
		  "     cin>>choice;",
		  " }while(choice!=0);",
		  "",
		  " return 0;",
		  "}"
		],
		"description": "paranthesizeexpression"
	  },
	  "infixtopostfix": {
		"prefix": "~postfix",
		"body": [
		  "#include <iostream>",
		  "#include <conio.h>",
		  "using namespace std;",
		  "",
		  "class stack {",
		  "public:",
		  "  char stack_array[50];",
		  "  int top;",
		  "  stack() { top = -1; }",
		  "  void push(char symbol) {",
		  "    if (full())",
		  "      cout << \"\\nStack overflow:\\n\";",
		  "    else {",
		  "      top = top + 1;",
		  "      stack_array[top] = symbol;",
		  "    }",
		  "  }",
		  "  char pop() {",
		  "    if (empty())",
		  "      return ('#');",
		  "    else",
		  "      return (stack_array[top--]);",
		  "  }",
		  "  int empty() {",
		  "    if (top == -1)",
		  "      return (1);",
		  "    else",
		  "      return (0);",
		  "  }",
		  "  int full() {",
		  "    if (top == 49)",
		  "      return (1);",
		  "    else",
		  "      return (0);",
		  "  }",
		  "",
		  "private:",
		  "  char infix[50];",
		  "  char postfix[50];",
		  "",
		  "public:",
		  "  void read() {",
		  "    cout << \"\\nEnter an infix expression:\";",
		  "    cin >> infix;",
		  "  }",
		  "  int white_space(char symbol) {",
		  "    if (symbol == ' ' || symbol == '\\t' || symbol == '\\0')",
		  "      return 1;",
		  "    else",
		  "      return 0;",
		  "  }",
		  "  void ConvertToPostfix() {",
		  "    int prev, p;",
		  "    char entry;",
		  "    p = 0;",
		  "    for (int i = 0; infix[i] != '\\0'; i++) {",
		  "      if (!white_space(infix[i])) {",
		  "        switch (infix[i]) {",
		  "        case '(':",
		  "          push(infix[i]);",
		  "          break;",
		  "        case ')':",
		  "          while ((entry = pop()) != '(')",
		  "            postfix[p++] = entry;",
		  "          break;",
		  "        case '+':",
		  "        case '-':",
		  "        case '*':",
		  "        case '/':",
		  "          if (!empty()) {",
		  "            prev = prior(infix[i]);",
		  "            entry = pop();",
		  "            while (prev <= prior(entry)) {",
		  "              postfix[p++] = entry;",
		  "              if (!empty())",
		  "                entry = pop();",
		  "              else",
		  "                break;",
		  "            }",
		  "            if (prev > prior(entry))",
		  "              push(entry);",
		  "          }",
		  "          push(infix[i]);",
		  "          break;",
		  "        default:",
		  "          postfix[p++] = infix[i];",
		  "          break;",
		  "        }",
		  "      }",
		  "    }",
		  "    while (!empty())",
		  "      postfix[p++] = pop();",
		  "    postfix[p] = '\\0';",
		  "    cout << \"\\nThe postfix expression is: \" << postfix << endl;",
		  "  }",
		  "  int prior(char symbol) {",
		  "    switch (symbol) {",
		  "    case '/':",
		  "      return (4);",
		  "    case '*':",
		  "      return (3);",
		  "    case '+':",
		  "      return (2);",
		  "    case '-':",
		  "      return (1);",
		  "    case '(':",
		  "      return (0);",
		  "    default:",
		  "      return (-1);",
		  "    }",
		  "  }",
		  "};",
		  "",
		  "int main() {",
		  "  char choice = 'y';",
		  "  stack expr;",
		  "  while (choice == 'y') {",
		  "    expr.read();",
		  "    expr.ConvertToPostfix();",
		  "    cout << \"\\n\\nDo you want to continue ? (y/n): \";",
		  "    cin >> choice;",
		  "  }",
		  "  return 0;",
		  "}"
		],
		"description": "infixtopostfix"
	  },
	  "jobqueues": {
		"prefix": "~jobqueue",
		"body": [
		  "#include <iostream>",
		  "#define MAX 10",
		  "using namespace std;",
		  "",
		  "struct queue {",
		  "  int data[MAX];",
		  "  int front, rear;",
		  "};",
		  "",
		  "class Queue {",
		  "  struct queue q;",
		  "",
		  "public:",
		  "  Queue() { q.front = q.rear = -1; }",
		  "  int isempty();",
		  "  int isfull();",
		  "  void enqueue(int);",
		  "  int delqueue();",
		  "  void display();",
		  "};",
		  "",
		  "int Queue::isempty()",
		  "{ ",
		  "    return (q.front == q.rear) ? 1 : 0; ",
		  "}",
		  "int Queue::isfull()",
		  "{ ",
		  "    return (q.rear == MAX - 1) ? 1 : 0;",
		  "}",
		  "void Queue::enqueue(int x) ",
		  "{",
		  "    q.data[++q.rear] = x; ",
		  "}",
		  "int Queue::delqueue()",
		  "{",
		  "    return q.data[++q.front];",
		  "}",
		  "void Queue::display()",
		  "{",
		  "  int i;",
		  "  cout << \"\\n\";",
		  "  for (i = q.front + 1; i <= q.rear; i++)",
		  "  {",
		  "    cout << q.data[i] << \" \";",
		  "  }",
		  "}",
		  "",
		  "int main() {",
		  "  Queue obj;",
		  "  int ch, x;",
		  "  do {",
		  "    cout << \"\\n1.Insert Job\\n2.Delete Job\\n3.Display\\n4.Exit\\nEnter your \"",
		  "            \"choice : \";",
		  "    cin >> ch;",
		  "    switch (ch) {",
		  "    case 1:",
		  "      if (!obj.isfull()) {",
		  "        cout << \"\\n Enter data : \\n\";",
		  "        cin >> x;",
		  "        obj.enqueue(x);",
		  "        cout << endl;",
		  "      } else",
		  "        cout << \"Queue is overflow!!!\\n\\n\";",
		  "      break;",
		  "    case 2:",
		  "      if (!obj.isempty())",
		  "        cout << \"\\n Deleted Element = \" << obj.delqueue() << endl;",
		  "      else {",
		  "        cout << \"\\n Queue is underflow!!!\\n\\n\";",
		  "      }",
		  "      cout << \"\\nRemaining Jobs : \\n\";",
		  "      obj.display();",
		  "      break;",
		  "    case 3:",
		  "      if (!obj.isempty()) {",
		  "        cout << \"\\n Queue contains : \\n\";",
		  "        obj.display();",
		  "      } else",
		  "        cout << \"\\n Queue is empty!!!\\n\\n\";",
		  "      break;",
		  "    case 4:",
		  "      cout << \"\\n Exiting Program.....\";",
		  "    }",
		  "  } while (ch != 4);",
		  "  return 0;",
		  "}"
		],
		"description": "jobqueues"
	  },
	  "Practical 14": {
		"prefix": "~dq",
		"body": [
		  "#include<iostream>",
		  "#include<deque>",
		  "using namespace std;",
		  "",
		  "int main(){",
		  "    deque<int> dq;",
		  "    int front,rear;",
		  "    int size;",
		  "    cout<<\"enter the size of deque\"<<\"\\n\";",
		  "    cin>>size;",
		  "    //insertion at front",
		  "    for(int i=0;i<size;i++){",
		  "        cout<<\"enter the element: \";",
		  "        cin>>front;",
		  "        dq.push_front(front);",
		  "    }",
		  "    ",
		  "    //insertion from rear",
		  "    for(int i=0;i<size;i++){",
		  "        cout<<\"enter the element: \";",
		  "        cin>>rear;",
		  "        dq.push_back(rear);",
		  "    }",
		  "    //deletion from rear",
		  "    dq.pop_back();",
		  "    //deletion from front",
		  "    dq.pop_front();",
		  "",
		  "    //printing deque",
		  "    while(!dq.empty()){ //printing till the deque gets empty",
		  "        cout<<dq.front()<<\" \"; ",
		  "        dq.pop_front();",
		  "    }",
		  "    cout<<\"\\n\"; //to change the line",
		  "",
		  "    return 0;",
		  "}",
		  "//in printing, we are printing every element from front and popping out every element after printing until the deque gets empty"
		],
		"description": "Practical 14"
	  }
}
